<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://arshiaafzal.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://arshiaafzal.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-27T23:15:47+00:00</updated><id>https://arshiaafzal.github.io/feed.xml</id><title type="html">blank</title><subtitle>Arshia Afzal personal page. </subtitle><entry><title type="html">LION ü¶Å Part I - Full Linear Attention</title><link href="https://arshiaafzal.github.io/blog/2025/lion-part1-model/" rel="alternate" type="text/html" title="LION ü¶Å Part I - Full Linear Attention"/><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://arshiaafzal.github.io/blog/2025/lion-part1-model</id><content type="html" xml:base="https://arshiaafzal.github.io/blog/2025/lion-part1-model/"><![CDATA[<figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/lion-480.webp 480w,/assets/img/lion-800.webp 800w,/assets/img/lion-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/lion.jpg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>[<a href="https://www.arxiv.org/abs/2502.16249">Paper</a>] [<a href="https://github.com/LIONS-EPFL/LION">Code</a>]</p> <ol> <li>Part I - Full Linear Attention</li> <li><a href="/blog/2025/lion-part2-theory/">Part II - Bi-directional RNN</a></li> <li><a href="/blog/2025/lion-part3-chunk/">Part III - Chunkwise Parallel from of LION</a></li> <li><a href="/blog/2025/lion-part4-results/">Part IV - Results</a></li> </ol> <hr/> <h1 id="tldr">TL;DR</h1> <p>Transformers with Linear Attention enable fast and parallel training. Moreover, they can be formulated as Recurrent Neural Networks (RNNs), for efficient linear-time inference. While extensively evaluated in causal sequence modeling, they have yet to be extended to the bi-directional setting. We introduce the <strong>LION</strong> framework, establishing new theoretical foundations for Linear Transformers in bi-directional sequence modeling. <strong>LION</strong> constructs a bi-directional RNN equivalent to full <strong>Linear Attention</strong>. This extends the benefits of Linear Transformers: parallel training and efficient inference into the bi-directional setting.</p> <div style="display: flex; align-items: flex-start;"> <div style="flex: 1; padding-right: 10px;"> <p> Existing memory-efficient bi-directional models employ more than 2x the training time of a Transformer. Our Linear Attention framework benefits from memory-efficient inference while maintaining the Transformer training speed. </p> <table> <tr> <th>Task</th> <th><span style="background-color: rgb(230, 255, 230); padding: 3px; color:black">ü¶Å-üî• </span></th> <th><span style="background-color: rgb(229, 204, 230); padding: 3px; color:black">ü¶Å-D </span></th> <th><span style="background-color: rgb(255, 233, 211); padding: 3px; color:black">ü¶Å-S </span></th> <th>Hydra</th> <th>Vim</th> </tr> <tr> <td>Vision</td> <td>$\times 0.73$</td> <td>$\times 1.39$</td> <td>$\times 1.46$</td> <td>$\times 2.51$</td> <td>$\times 10.86$</td> </tr> <tr> <td>MLM </td> <td>$\times 0.95$</td> <td>$\times 1.10$</td> <td>$\times 1.32$</td> <td>$\times 3.13$</td> <td>‚úó</td> </tr> </table> <div class="caption" style="color: #666666; margin-top: 1px;"> Training time (‚Üì) relative to Transformer of the same scale </div> </div> <div style="flex: 0 0 50%;"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fig1_plot.svg" sizes="95vw"/> <img src="/assets/img/fig1_plot.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Using <strong>LION</strong>, we cast three Linear Transformers to their bi-directional form:</p> <ul> <li><strong>LION-Ô∏è‚Äçüî•</strong>, the bi-directional variant corresponding to <a href="https://arxiv.org/abs/2006.16236">LinearTransformer</a>.</li> <li><strong>LION-D</strong>, extending <a href="https://arxiv.org/abs/2307.08621">RetNet</a>.</li> <li><strong>LION-S</strong>, a Linear Transformer with a stable selective mask inspired by selectivity of SSMs like <a href="https://arxiv.org/abs/2405.21060">Mambaüêç</a>.</li> </ul> <p>By replacing the attention block with <strong>LION (-Ô∏è‚Äçüî•, -D, -S)</strong>, we achieve performance on bi-directional tasks that is comparable to Transformers and State-Space Models (SSMs) while improving training speed.</p> <hr/> <p>Recently, Transformers with Linear Attention <d-cite key="katharopoulos2020transformers"></d-cite> and State Space Models <d-cite key="gu2023mamba"></d-cite> <d-cite key="gu2022efficiently"></d-cite> <d-cite key="dao2024transformers"></d-cite> (SSMs) have gained significant popularity for causal sequence modeling due to their ability to efficiently support both parallel training and RNN-like inference. These models have demonstrated impressive accuracy in causal tasks, particularly in causal language modeling. For bi-directional sequence modeling, SSMs, particularly Mamba <d-cite key="gu2023mamba"></d-cite>, have been evaluated in vision tasks along with architecture iterations like Vision Mamba <d-cite key="zhu2024vision"></d-cite> and Hydra <d-cite key="hwang2025hydra"></d-cite>. However, Transformers with Linear Attention have been less explored in the bi-directional setting.</p> <p>We are curious to explore whether Linear Attention Transformers, including the vanilla Linear Transformer <d-cite key="katharopoulos2020transformers"></d-cite> or RetNet <d-cite key="sun2023retentive"></d-cite> can perform effectively on bi-directional sequence modeling. More specifically, what modifications are needed to adapt them for tasks like image classification and masked language modeling? üòä</p> <p>Let‚Äôs break this down with three key questions:</p> <h3 id="question-1-applicability">Question 1 (Applicability)</h3> <p>Given that Linear Transformers can be formulated as RNNs, offering efficiency benefits during inference and enabling parallel training for causal sequence modeling, can they also provide similar advantages for bi-directional processing? If so, what would the parallel form be, and how would the equivalent bi-directional RNN be structured?</p> <h3 id="question-2-performance">Question 2 (Performance)</h3> <p>Can simple Linear Transformers, like Linear Transformer <d-cite key="katharopoulos2020transformers"></d-cite> or RetNet <d-cite key="sun2023retentive"></d-cite>, perform well on bi-directional tasks such as image classification or masked language modeling?</p> <h3 id="question-3-training-throughput">Question 3 (Training Throughput)</h3> <p>While bi-directional SSMs are performant, they tend to be difficult and slow to train compared to Transformers with Full Attention (e.g., ViT <d-cite key="dosovitskiy2020image"></d-cite> and BERT <d-cite key="devlin2018bert"></d-cite>). Can Linear Transformers match the accuracy and efficiency of bi-directional SSMs while maintaining the training throughput of Softmax Transformers?</p> <h2 id="from-causal-to-full-linear-attention">From Causal to Full Linear Attention</h2> <p>Let‚Äôs start with Linear Attention Recurrence:</p> \[\begin{aligned} &amp; S_i = S_{i-1} + k_i v^\top_i, \quad z_i = z_{i-1} + k_i, \\ &amp; Scaled: y_i = \frac{q^\top_i S_i}{q^\top_i z_i}, \quad Non-Scaled: y_i = q^\top_i S_i \\ \end{aligned}\] <p>Above is the RNN form of the Linear Attention which has the parallel form of:</p> \[\mathbf{Y} = Scale \left(\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M}^C \right)\] <p>and the mask \(\mathbf{M}^C\) is a lower triangular \(C\)ausal mask. Causal Linear Transformers are a class of models introduced following the development of the original Linear Transformer as shown above <d-cite key="katharopoulos2020transformers"></d-cite>. These models typically define a recurrence of the form:</p> \[\begin{aligned} S_i = \boldsymbol{\Lambda_i} \star S_{i-1} + \gamma_i k_i v^\top_i, \quad z_i = \boldsymbol{\Lambda_i} \star z_{i-1} + \gamma_i k_i, \\ Scaled: y_i = \frac{q^\top_i S_i}{q^\top_i z_i}, \quad Non-Scaled: y_i = q^\top_i S_i \\ \end{aligned}\] <p>Here, \(\boldsymbol{\Lambda_i}\) and \(\gamma_i\) are decay factors introduced after the Linear Transformer to enhance the performance and \(\star\) denotes an associative operator which depends on the specific model. (Spoiler alert ‚ö†Ô∏è: the family of Linear Transformers has strong connections to SSMs, as explored in works like Deltanet <d-cite key="yang2024parallelizing"></d-cite> and Mamba2 <d-cite key="dao2024transformers"></d-cite> through state space duality (SSD) üòâ). Many models apply a non-linear activation to queries and keys, such that \(\mathbf{k}_i = \phi(\mathbf{k}_i)\) and \(\mathbf{q}_i = \phi(\mathbf{q}_i)\). To avoid notation clutter, we omit explicitly writing \(\phi(.)\) everywhere assuming by default that queries and keys are already non-linearized. For simplicity, we consider \(\boldsymbol{\Lambda_i} = \lambda_i\) as a scalar and \(\gamma_i = 1\). We now present the general Scaled Linear Attention in the following form:</p> \[\begin{aligned} S_i &amp;= \lambda_i S_{i-1} + k_i v^\top_i,\\ z_i &amp;= \lambda_i z_{i-1} + k_i, \\ y_i &amp;= \frac{q^\top_i S_i}{q^\top_i z_i} \\ \end{aligned}\] <p>The first goal is to extend the Causal Linear Attention parallel form</p> \[\mathbf{Y} = \text{Scale} \left(\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M}^C \right)\] <p>to a Scaled and Masked Full Linear Attention mechanism.</p> <h2 id="creating-scaled-and-masked-full-attention">Creating Scaled and Masked Full Attention</h2> <p>The first step is quite simple: the Masked and Scaled Attention can naturally take the following form, as suggested by its name:</p> <blockquote class="block-tip"> <p><strong>Full Linear Attention</strong></p> \[\mathbf{Y} = \text{Scale} \left(\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M} \right)\] </blockquote> <p>The important part is how to well define the matrix \(\mathbf{M}\). A natural choice is to extend the causal mask \(\mathbf{M^C}\), where the causal mask between tokens \(i,j\) is given by \(\mathbf{M}^C_{ij} = \lambda_{j+1} \lambda_{j+2} \dots \lambda_i\), representing the product of all selective scalers between \(i\) and \(j\). In the bi-directional case, the full mask should preserve this desirable property. One can interpret the mask entries as a relative positional encoding between two tokens taking the following form:</p> \[\begin{aligned} \mathbf{M}_{ij} = \begin{cases} \Pi_{k=j}^{i-1}{\lambda_k}, &amp; i &gt; j \\ 1 &amp; i=j\\ \Pi_{k=i+1}^{j}{\lambda_k}, &amp; i &lt; j. \end{cases} \end{aligned}\] <p>To recap, the full output of Full Linear Attention can be presented as:</p> <p><span style="font-size: 0.7em;"> \(\mathbf{Y} = Scale \left( \underbrace{\left( \renewcommand*{\arraystretch} \begin{array}{ccccc} \mathbf{q}_1^{\top}\mathbf{k}_1 &amp; \mathbf{q}_1^{\top}\mathbf{k}_2 &amp; \cdots &amp; \mathbf{q}_1^{\top}\mathbf{k}_L \\ \mathbf{q}_2^{\top}\mathbf{k}_1 &amp; \mathbf{q}_2^{\top}\mathbf{k}_2 &amp; \cdots &amp; \mathbf{q}_2^{\top}\mathbf{k}_L\\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ \mathbf{q}_L^{\top}\mathbf{k}_1 &amp; \mathbf{q}_L^{\top}\mathbf{k}_2 &amp; \cdots &amp; \mathbf{q}_L^{\top}\mathbf{k}_L\\ \end{array} \right)}_{\hspace{1mm} \mathbf{A} = \mathbf{Q} \mathbf{K}^{\top}} \odot \underbrace{ \left( \renewcommand*{\arraystretch} \begin{array}{ccccc} 1 &amp; \lambda_2 &amp; \lambda_2 \lambda_3 &amp; \cdots &amp; \lambda_2 \cdots \lambda_L \\ \lambda_1 &amp; 1 &amp; \lambda_3 &amp; \cdots &amp; \lambda_3 \cdots \lambda_L \\ \lambda_2 \lambda_1 &amp; \lambda_2 &amp; 1 &amp; \cdots &amp; \lambda_4 \cdots \lambda_L \\ \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ \lambda_{L-1} \cdots \lambda_1 &amp; \lambda_{L-1} \cdots \lambda_2 &amp; \lambda_{L-1} \cdots \lambda_3 &amp; \cdots &amp; 1 \\ \end{array} \right) }_{\hspace{1mm} \mathbf{M}} \right) \left( \renewcommand*{\arraystretch} \begin{array}{c} \mathbf{v}_1^\top \\ \mathbf{v}_2^\top \\ \mathbf{v}_3^\top \\ \vdots \\ \mathbf{v}_L^\top \\ \end{array} \right)\) </span></p> <p>The equation above represents the Full <strong>Linear</strong> Attention in parallel form. Now that we have established Full Linear Attention for bi-directional sequence modeling, it‚Äôs time to derive its equivalent bi-directional RNN.</p> <h3 id="an-important-question"><strong>An Important Question:</strong></h3> <blockquote> <p><strong>Question:</strong> Is it worth training with Full Attention on bi-directional tasks considering it has quadratic complexity with sequence length \(O(L^2)\)?</p> </blockquote> <p>The answer is <strong>yes</strong>! Unlike causal language modeling, for bi-directional tasks such as Vision ($L=196$) and Masked Language Modeling (MLM) ($L=128$), sequence lengths used in practice are relatively short. This means that we can usually fit Full Attention in memory enalbing higher throughput without a significant trade-off in complexity.</p> <p>We believe that architectures designed for causal tasks can really benefit from modifications to adapt them to the bi-directional domain.</p> <h2 id="next-up">Next Up</h2> <ul> <li> <p>We introduce our framework, <strong>LION</strong>, which derives an equivalent bi-directional RNN for Full Linear Attention.</p> </li> <li> <p>Within this framework, we demonstrate how different Linear Transformers can be extended to their bi-directional counterparts.</p> </li> <li> <p>We explore the construction of stable masks \(\mathbf{M}\), enabling models using LION to <strong>TRAIN IN PARALLEL</strong> using Full Attention and <strong>INFER EFFICIENTLY</strong> like an RNN.</p> </li> <li> <p>Finally, we introduce a <strong>chunkwise parallel</strong> variant of LION to balance recurrence and parallelism üôÇ.</p> </li> </ul> <p><a href="/blog/2025/lion-part2-theory/">Continue reading to Part II - Bi-directional RNN</a></p> <p><em>Acknowledgement:</em> We appreciate <a href="https://goombalab.github.io/">Albert Gu</a> and <a href="https://tridao.me/blog/">Tri Dao</a> for their insightful blog posts, which have been helpful in shaping our own.</p>]]></content><author><name>Arshia Afzal</name></author><summary type="html"><![CDATA[Explaining the Full Linear Attention paradigm for bi-directional sequence modeling]]></summary></entry><entry><title type="html">LION ü¶Å Part II - Bi-directional RNN</title><link href="https://arshiaafzal.github.io/blog/2025/lion-part2-theory/" rel="alternate" type="text/html" title="LION ü¶Å Part II - Bi-directional RNN"/><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://arshiaafzal.github.io/blog/2025/lion-part2-theory</id><content type="html" xml:base="https://arshiaafzal.github.io/blog/2025/lion-part2-theory/"><![CDATA[<p>[<a href="https://www.arxiv.org/abs/2502.16249">Paper</a>] [<a href="https://github.com/LIONS-EPFL/LION">Code</a>]</p> <ol> <li><a href="/blog/2025/lion-part1-model/">Part I - Full Linear Attention</a></li> <li>Part II - Bi-directional RNN</li> <li><a href="/blog/2025/lion-part3-chunk/">Part III - Chunkwise Parallel from of LION</a></li> <li><a href="/blog/2025/lion-part4-results/">Part IV - Results</a></li> </ol> <p>In <a href="/blog/2025/lion-part1-model/">Part I</a> of this series, we defined Full Linear Attention with Masking and Scaling. Similar to all Linear Transformers designed for Causal Sequence Modeling, we aim to derive an RNN form for efficiency during inference. In this section, we theoretically demonstrate the equivalent bi-directional RNN for the Full Linear Transformer.</p> <h2 id="finding-bi-directional-rnn-equal-to-full-linear-attention">Finding Bi-directional RNN Equal to Full Linear Attention</h2> <p>We aim to construct an RNN that is equivalent to the Masked and Scaled Linear Attention. The idea of a bi-directional RNN is to process the sequence in both the forward order (from first to last) and the reverse order (from last to first), these naturally correspond to the upper and lower parts of the Attention matrix and mask.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/att_mask_color.svg" sizes="95vw"/> <img src="/assets/img/att_mask_color.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Note:</strong> We use a consistent color coding for this section of the blog post and throughout our <a href="https://www.arxiv.org/abs/2502.16249">paper</a> üòä.</p> <ul> <li><span style="background-color: rgb(255, 248, 203); padding: 3px; color:black">Yellow</span> color indicates the <strong>upper part of the matrix (non-causal)</strong>.</li> <li><span style="background-color: rgb(254, 200, 201); padding: 3px; color:black">Red</span> color represents the <strong>diagonal elements</strong>.</li> <li><span style="background-color: rgb(208, 243, 248); padding: 3px; color:black">Blue</span> color corresponds to the <strong>lower triangular (causal) part</strong>.</li> </ul> <p>Let‚Äôs seperate the Attention into upper and lower parts:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/att_sep.svg" sizes="95vw"/> <img src="/assets/img/att_sep.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This formulation represents both the causal and non-causal forms of Attention. We would like to model each triangular part using an RNN. Similarly, we can also separate the mask in the same way:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mask_sep.svg" sizes="95vw"/> <img src="/assets/img/mask_sep.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Let‚Äôs also write the scaling part of the Masked Attention $\mathbf{Y} = \text{Scale}(\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M} ) \mathbf{V}$ as:</p> \[\begin{aligned} \mathbf{Y} = \big(\text{Scale}(\mathbf{Q}\mathbf{K}^{\top} \odot \mathbf{M})\big) \mathbf{V} = (\mathbf{C}^{-1}(\mathbf{Q}\mathbf{K}^{\top} \odot \mathbf{M}))\mathbf{V}, \hspace{1mm} \mathbf{C}_i = \mathbf{q}^{\top}_i\sum\limits_{j=1}^{L} \mathbf{M}_{ij}\mathbf{k}_j. \end{aligned}\] <p>Also, we can decompose the scaling matrix \(\mathbf{C}_i\) as:</p> \[\begin{aligned} \mathbf{C}_{i}= \underbrace{\mathbf{q}^{\top}_i\sum\nolimits_{j=1}^{i} \mathbf{M}_{ij}\mathbf{k}_j - \frac{1}{2} \mathbf{q}^{\top}_i\mathbf{k}_i}_{\mathbf{C}^F_i} + \underbrace{\mathbf{q}^{\top}_i\sum\nolimits_{j=i}^{L} \mathbf{M}_{ij}\mathbf{k}_j - \frac{1}{2} \mathbf{q}^{\top}_i\mathbf{k}_i}_{\mathbf{C}^B_i} \end{aligned}\] <p>Now we replace the above scaling matrix $\mathbf{C}$ in the output of the Attention form of $\mathbf{Y} = \text{Scale}(\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M} ) \mathbf{V}$ . Interestingly, many terms naturally cancel out with each other.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/proofC.svg" sizes="95vw"/> <img src="/assets/img/proofC.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>This results in only the forward and backward directions of the RNN remaining. As observed, the forward path aligns with Causal Linear Attention with masking. Now, we need to demonstrate that the backward path follows the same RNN structure in the reverse direction. We can simply flip the upper triangular matrices using the <a href="https://en.wikipedia.org/wiki/Exchange_matrix">Exchange Matrix</a> \(\mathbf{J}_L\) and the function \(F(X) = \mathbf{J}_L X \mathbf{J}_L\):</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/flip.svg" sizes="95vw"/> <img src="/assets/img/flip.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Cool! Now, both the upper part (equivalent to the RNN in the forward direction) and the lower part (equivalent to the RNN in the backward direction) can be formulated as RNNs. This is exactly what we need to construct our bi-directional RNN equivalent to Full Linear Attention.</p> <blockquote class="block-tip"> <p><strong>LION: Reccurence form</strong></p> \[\begin{aligned} \mathbf{S}_i^{F/B} &amp;= \lambda_i \mathbf{S}^{F/B}_{i-1} + \mathbf{k}_i \mathbf{v}_i^{\top}, \\ \mathbf{z}^{F/B}_i &amp;= \lambda_i \mathbf{z}^{F/B}_{i-1} + \mathbf{k}_i, \\ c^{F/B}_i &amp; = \mathbf{q}_i^{\top} \mathbf{z}^{F/B}_{i} - \frac{\mathbf{q}_i^{\top} \mathbf{k}_i}{2}, \\ \mathbf{y}^{F/B}_i &amp;= \mathbf{q}_i^{\top} \mathbf{S}^{F/B}_i - \frac{\mathbf{q}_i^{\top} \mathbf{k}_i}{2} \mathbf{v}_i, \\ out&amp;put: \mathbf{y}_i = \frac{\mathbf{y}^{F}_i + \mathbf{y}^{B}_i}{c^F_i + c^B_i}. \\ \end{aligned}\] </blockquote> <p>The terms \(\frac{\mathbf{q}_i^{\top} \mathbf{k}_i}{2}\) and \(\frac{\mathbf{q}_i^{\top} \mathbf{k}_i}{2} \mathbf{v}_i\) are subtracted to avoid double counting. This bi-directional RNN is equivalent to Scaled and Masked Linear Attention described in previous section of this blogpost.</p> <h2 id="some-important-details-of-our-rnn">Some Important details of our RNN</h2> <blockquote> <p>Only the states \(c^{F/B}_i\) and \(\mathbf{y}^{F/B}_i\) are stored per token, resulting in \(\mathcal{O}(Ld)\) memory usage. In contrast, naively storing full matrix-valued hidden states would require \(\mathcal{O}(Ld^2)\), which becomes infeasible for large models.</p> </blockquote> <blockquote> <p>Forward and backward recurrences run independently, completing in \(L\) time steps with \(L\) memory units, compared to \(2L\) in the naive approach.</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/memory.svg" sizes="95vw"/> <img src="/assets/img/memory.svg" width="100%" height="auto" title="Memory Allocation of LION in RNN form" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Memory allocation in LION during Forward and Backward recurrences.</figcaption> </figure> <p>All in one, we can visualize our framework:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/frlion.svg" sizes="95vw"/> <img src="/assets/img/frlion.svg" width="100%" height="auto" title="LION" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">LION ü¶Å: Our framework for training in parallel using Full Linear Attention which also supports the efficient bi-directional RNN format.</figcaption> </figure> <h2 id="different-masks-of-lion">Different Masks of LION</h2> <p>Now that we have created our framework let‚Äôs see what are the choices of the decay factor \(\lambda_i\) and how they resemble known Linear Transformer models. Let‚Äôs set:</p> <blockquote> <p>$\lambda_i=1$ resembles the bi-directional version of the vanilla Linear Transformer <d-cite key="katharopoulos2020transformers"></d-cite> which we refer to as <span style="background-color: rgb(230, 255, 230); padding: 3px; color:black">LION-üî• </span> (-LIT in <a href="https://www.arxiv.org/abs/2502.16249">the paper</a>).</p> </blockquote> <blockquote> <p>$\lambda_i=\lambda$ resembles the bi-directional version of RetNet <d-cite key="sun2023retentive"></d-cite> which we refer to as <span style="background-color: rgb(229, 204, 230); padding: 3px; color:black">LION-D </span>.</p> </blockquote> <blockquote> <p>$\lambda_i=\sigma(\mathbf{W}\mathbf{x}_i)$ (input dependent) resembles a bi-directional selective Linear Transformer inspired by Mamba2 <d-cite key="dao2024transformers"></d-cite> which we refer to as <span style="background-color: rgb(255, 233, 211) ; padding: 3px; color:black">LION-S </span>.</p> </blockquote> <p>We evaluate all models on several bi-directional tasks. Also inspired by Linear Transformers applying a feature mapping $\phi(.)$ to queries and keys we apply normalized shifted SILU $\phi(x)=$ <code class="language-plaintext highlighter-rouge">(SILU(x)+0.5)/(norm(SILU(x)+0.5))</code> as a non-linear activation function. Let‚Äôs dive deep in each of these models in LION framework.</p> <h3 id="lion-">LION-üî•</h3> <p>LION-üî• is an extension of the original Linear Transformer <d-cite key="katharopoulos2020transformers"></d-cite>. Without any masking, the bi-directional parallel form can be simply written as:</p> \[\mathbf{Y} = Scale(\mathbf{Q} \mathbf{K}^\top )\mathbf{V}\] <p>the RNN form is the one introduced the previous green box ‚ÄúLION: Reccurence form‚Äù with \(\lambda_i=1\).</p> <h3 id="lion-d">LION-D</h3> <p>By fixing \(\lambda_i = \lambda\), the mask \(\mathbf{M}\) has the form:</p> \[\begin{align} \mathbf{M}_{ij} = \lambda^{|i-j|}, \quad \mathbf{D}_{ij} = |i-j|\log(\lambda), \quad \mathbf{M} = \exp(\mathbf{D}). \notag \end{align}\] <p>\(\mathbf{M}\) above is a Toeplitz mask <d-cite key="qin2023toeplitz"></d-cite>, we can efficiently create a decay mask with such structure using simple PyTorch functions. To ensure numerical stability, we bound the parameter \(\lambda\) with a <strong>sigmoid</strong>, setting \(\lambda = \sigma(a)\). Without this constraint, the scalar \(\lambda^L\) could become excessively large, leading to instability. In practice, for <strong>RetNet-style mask</strong> with a fixed decay, multiplication remains stable. Such mask can be implemented as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decay_mask</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">a</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">meshgrid</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">indexing</span><span class="o">=</span><span class="sh">"</span><span class="s">ij</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">e</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">abs</span><span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">)).</span><span class="nf">float</span><span class="p">().</span><span class="nf">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sigmoid</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="nf">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="n">e</span>
    <span class="k">return</span> <span class="n">m</span>
</code></pre></div></div> <h3 id="lion-s">LION-S</h3> <p>Observing the structure of $\mathbf{M}$, its upper ($\mathbf{M}^B$) and lower ($\mathbf{M}^F$) triangular parts are rank-1 <a href="https://people.cs.kuleuven.be/~raf.vandebril/homepage/publications/papers_html/qrq_07/node16.html">semi-separable matrices</a> <d-cite key="dao2024transformers"></d-cite>, allowing for efficient computation via matrix multiplications.</p> <p>During training, the decay factors $\lambda_i$ are stacked into ${\lambda}^F \in \mathbb{R}^L$, and the cumulative product</p> \[\mathbf{L}^F = cumprod(\lambda^F) = \prod_{k=0}^{i} \lambda^F_k\] <p>is used to generate the lower triangular mask \(\mathbf{M}^F\). For the upper triangular mask \(\mathbf{M}^B\), the input sequence is flipped, and the decay factors are computed as</p> \[\boldsymbol{\lambda}^B = \text{Flip}(\boldsymbol{\lambda}^F), \quad \mathbf{L}^B = cumprod(\boldsymbol{\lambda}^B).\] <p>The masks are then constructed as, \(\mathbf{M}^F =\) <code class="language-plaintext highlighter-rouge">tril(LF@inv(LF)^T)</code> for the forward part and \(\mathbf{M}^B =\) <code class="language-plaintext highlighter-rouge">triu(LB@inv(LB)^T)</code> for the backward part. Where <code class="language-plaintext highlighter-rouge">tril(.)</code> and <code class="language-plaintext highlighter-rouge">triu(.)</code> extract the lower and upper triangular parts of the input matrix respectively and <code class="language-plaintext highlighter-rouge">inv(.)</code> is a element wise inverse. The full mask is then obtained as</p> \[\mathbf{M} = \mathbf{M}^F + \mathbf{M}^B - \mathbf{I}.\] <p>To improve numerical stability, the selective scalar $\lambda_i$ is designed in exponential form</p> \[\lambda_i = e^{a_i}.\] <p>This results in the cumulative sum:</p> \[\mathbf{D}^F_{ij} = \begin{cases} \sum_{k=i}^{j+1} a_k, &amp; \text{if } i &gt; j, \\ - \infty, &amp; \text{if } i &lt; j, \\ 0, &amp; \text{if } i = j, \end{cases}\] \[\mathbf{M^F} = \exp(\mathbf{D^F}),\] <p>where $\exp(\cdot)$ is applied element-wise. The same process applies to $\mathbf{M}^B$ by flipping the input sequence order.</p> <p>Here, $\mathbf{D}^{F/B} = cumsum(\mathbf{a}^{F/B})$, where $\mathbf{a} \in \mathbb{R}^L$ contains the selective exponents $a_i$.</p> <p>Ensuring stability is crucial, as $\mathbf{L}^{F/B}$ can overflow or underflow when forming the full mask without chunking. To mitigate this, we define</p> \[a_i = \log(\sigma(\mathbf{W}_{a}^\top\mathbf{x}_i + b)),\] <p>where $\sigma(.)$ is the sigmoid function. By bounding $a_i$ within the interval $[0,1]$ we get numerical stability.</p> <p><strong>Note:</strong> We find using bounded activation functions to be important in practise since unbounded activations could cause NaN values in the loss function. To maintain stability, <strong>Chunking</strong> is required during training in Mamba and Hydra models when using the full sequence. This issue has been specifically highlighted in the <strong>Mamba2</strong> <a href="https://goombalab.github.io/blog/2024/mamba2-part3-chunk/">blog post</a> and can, again, be attributed to the softplus activation being unbounded. Since LION models use sigmoid activation, chunking is not required for training. In the <strong>Results</strong> section of this blog post, we explore why using <strong>Full Attention</strong> is beneficial for achieving <strong>high throughput</strong> during training.</p> <p>The code for building the mask of LION-S is simple, a Pytorch implementation is provided below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_causal_mask_lions</span><span class="p">(</span><span class="n">tensor</span><span class="p">):</span>
    <span class="n">cumsum</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">cumprod</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">cumsum</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">matmul</span><span class="p">(</span>
        <span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mf">1e-7</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tril</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">selective_mask</span><span class="p">(</span><span class="n">vec</span><span class="p">):</span>
    <span class="n">vec_shape</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">shape</span>
    <span class="n">a_for</span> <span class="o">=</span> <span class="nf">create_matrix_from_tensor</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)).</span><span class="nf">squeeze</span><span class="p">()</span>
    <span class="n">a_back</span> <span class="o">=</span> <span class="p">(</span>
        <span class="nf">create_matrix_from_tensor</span><span class="p">(</span>
            <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">(</span>
                <span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="n">vec_shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">vec_shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">),</span> <span class="n">device</span><span class="o">=</span><span class="n">vec</span><span class="p">.</span><span class="n">device</span><span class="p">)),</span>
                <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
            <span class="p">)[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">:]</span>
            <span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">squeeze</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">a_for</span> <span class="o">+</span> <span class="n">a_back</span> <span class="o">-</span> <span class="n">torch</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="n">a_for</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]).</span><span class="nf">to</span><span class="p">(</span><span class="n">a_for</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div> <h2 id="lion-attention-block">LION Attention Block</h2> <p>We can formulate the parallel Attention form of LION supporting all three extensions of our main experiments:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LIONAttention</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">dim</span><span class="p">,</span>
        <span class="n">num_heads</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">qkv_bias</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">qk_scale</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">attn_drop</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
        <span class="n">proj_drop</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
        <span class="n">silunorm</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">mask_type</span><span class="o">=</span><span class="sh">"</span><span class="s">Lit</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span> <span class="o">=</span> <span class="n">num_heads</span>
        <span class="n">head_dim</span> <span class="o">=</span> <span class="n">dim</span> <span class="o">//</span> <span class="n">num_heads</span>
        <span class="n">self</span><span class="p">.</span><span class="n">scale</span> <span class="o">=</span> <span class="n">qk_scale</span> <span class="ow">or</span> <span class="n">head_dim</span><span class="o">**-</span><span class="mf">0.5</span>

        <span class="n">self</span><span class="p">.</span><span class="n">qkv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">dim</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="n">qkv_bias</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">attn_drop</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="n">attn_drop</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">proj</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">dim</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">proj_drop</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="n">proj_drop</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mask_type</span> <span class="o">=</span> <span class="n">mask_type</span>

        <span class="k">if</span> <span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Lit</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">elif</span> <span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Selective</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">a_i</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Linear</span><span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="n">num_heads</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Decay</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">a_i</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">Parameter</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="n">num_heads</span><span class="p">))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">non_lin</span> <span class="o">=</span> <span class="n">silu_shifted</span>
        <span class="n">self</span><span class="p">.</span><span class="n">silunorm</span> <span class="o">=</span> <span class="n">silunorm</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">qkv</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">qkv</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">,</span> <span class="n">c</span> <span class="o">//</span> <span class="n">self</span><span class="p">.</span><span class="n">num_heads</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">permute</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">q</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">non_lin</span><span class="p">(</span><span class="n">qkv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">silunorm</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">silunorm</span><span class="p">),</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">non_lin</span><span class="p">(</span><span class="n">qkv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">silunorm</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">silunorm</span><span class="p">),</span>
            <span class="n">qkv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
        <span class="p">)</span>

        <span class="n">a_i</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">a_i</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">a_i</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="nf">sigmoid</span><span class="p">(</span><span class="n">a_i</span><span class="p">)</span> <span class="o">+</span> <span class="mf">1e-7</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Selective</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="nf">selective_mask</span><span class="p">(</span><span class="n">a_i</span><span class="p">)</span>

        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Decay</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="nf">decay_mask</span><span class="p">(</span><span class="n">a_i</span><span class="p">)</span>

        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">mask_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Lit</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="mi">1</span>

        <span class="n">attn</span> <span class="o">=</span> <span class="p">(</span><span class="n">q</span> <span class="o">@</span> <span class="n">k</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="n">attn</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">attn</span>

        <span class="c1"># Scaling
</span>        <span class="n">attn</span> <span class="o">=</span> <span class="n">attn</span> <span class="o">/</span> <span class="n">attn</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">attn</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">attn_drop</span><span class="p">(</span><span class="n">attn</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">attn</span> <span class="o">@</span> <span class="n">v</span><span class="p">).</span><span class="nf">transpose</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">proj</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">proj_drop</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <blockquote> <p><strong>Question:</strong> As seen above, the <strong>RNN</strong> is more efficient than the <strong>Transformer</strong> since it only requires storing the output for each token, resulting in a memory complexity of <strong>$\mathcal{O}(Ld)$</strong>, as opposed to storing the full Attention matrix, which requires <strong>$\mathcal{O}(L^2 d)$</strong>. Can we achieve a balance between the speed of Attention parallelism and the efficiency of an RNN?</p> </blockquote> <p>We will answer this question in our next section by introducing LION-Chunk.</p> <h2 id="next-up">Next Up</h2> <ul> <li> <p>In the next section of this series, we will describe how to apply a <strong>chunkwise parallel form</strong> for LION, allowing us to balance between the <em>RNN structure</em> and the <em>Attention-based</em> formulation.</p> </li> <li> <p>We show the numercial results and experiments on <a href="https://www.image-net.org/">Imagenet</a> and <a href="https://paperswithcode.com/dataset/c4">C4</a> dataset üòä.</p> </li> </ul> <p><a href="/blog/2025/lion-part3-chunk/">Continue reading to Part III - Chunkwise Parallel from of LION</a></p>]]></content><author><name>Arshia Afzal</name></author><summary type="html"><![CDATA[Deriving equivalent bi-directional RNN for Linear Attention]]></summary></entry><entry><title type="html">LION ü¶Å Part III - Chunkwise Parallel from of LION</title><link href="https://arshiaafzal.github.io/blog/2025/lion-part3-chunk/" rel="alternate" type="text/html" title="LION ü¶Å Part III - Chunkwise Parallel from of LION"/><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://arshiaafzal.github.io/blog/2025/lion-part3-chunk</id><content type="html" xml:base="https://arshiaafzal.github.io/blog/2025/lion-part3-chunk/"><![CDATA[<p>[<a href="https://www.arxiv.org/abs/2502.16249">Paper</a>] [<a href="https://github.com/LIONS-EPFL/LION">Code</a>]</p> <ol> <li><a href="/blog/2025/lion-part1-model/">Part I - Full Linear Attention</a></li> <li><a href="/blog/2025/lion-part2-theory/">Part II - Bi-directional RNN</a></li> <li>Part III - Chunkwise Parallel from of LION</li> <li><a href="/blog/2025/lion-part4-results/">Part IV - Results</a></li> </ol> <p>Since we have now established the LION framework, which maps Full Linear Attention into a bi-directional RNN in <a href="/blog/2025/lion-part2-theory/">Part II</a> of this series, a key question arises:</p> <p>Given that RNNs are efficient and Attention is fast, can we strike a balance between them?</p> <p>For causal Transformers like DeltaNet <d-cite key="yang2024parallelizing"></d-cite> and GLA <d-cite key="yang2024gated"></d-cite>, as well as the SSD algorithm in Mamba2 <d-cite key="dao2024transformers"></d-cite>, a chunkwise parallel form of Full Linear Attention could be an effective solution. Additionally, in models like Hydra <d-cite key="hwang2025hydra"></d-cite>, this balance is achieved by applying two SSD algorithms. However, can we derive a unified framework for chunking Full Linear Attention, particularly for LION-S and LION-D, where the mask $\mathbf{M}$ structure is known? The aim of chunking Full Linear Attention in LION is to maintain a balance between efficiency and speed, particularly during inference. Since LION benefits from stable masks, it does <strong>not</strong> require chunking during training allowing for higher throughput, especially for short sequences, when compared to other models such as Hydra <d-cite key="hwang2025hydra"></d-cite>. While in <strong>Gated Linear Attention (GLA)</strong> <d-cite key="yang2024gated"></d-cite>, <strong>DeltaNet</strong> <d-cite key="yang2024parallelizing"></d-cite>, and the <strong>SSD algorithm of Mamba2</strong> <d-cite key="dao2024transformers"></d-cite> <em>causal-specific</em> chunking methods are employed, we extend this to the non-causal case as well.</p> <h2 id="lion-chunk">LION-Chunk</h2> <p>The key idea of chunking is that instead of processing the entire sequence of length $L$, we divide it into $N$ subsequences of length $C$, where $N \times C = L$.<br/> To achieve this, we start with the Full Linear Attention formulation:</p> \[\mathbf{Y} = (\mathbf{Q} \mathbf{K}^\top \odot \mathbf{M}) \mathbf{V}\] <p>we first chunk the queries, keys and values into submatrices</p> \[\mathbf{Q}_{[i]} , \mathbf{K}_{[i]}, \mathbf{V}_{[i]} \in \mathbb{R}^{C \times d}\] <p>Now, given the form \((\mathbf{A} \odot \mathbf{M})\), where \(\mathbf{A} = \mathbf{Q} \mathbf{K}^\top\) we can construct the chunkwise form in four parts</p> <ul> <li>Chunkwise \(\mathbf{A}_{[ij]}\)</li> <li>Chunkwise form for the scaling matrix $\mathbf{C}_{[ij]}$</li> <li>The chunked hidden state to shape the unscaled output $\mathbf{S}_{[i(j-1)]}$</li> <li>Finally the output of the chunk $i$ which is $\mathbf{Y}_{[i]}$</li> </ul> <p>using these chunked matrices we shape the full linear atteniton in chunk form as bellow:</p> <blockquote class="block-tip"> <p><strong>LION Chunk</strong></p> \[\begin{aligned} \mathbf{A}_{[ij]} &amp; = \mathbf{Q}_{[i]}\mathbf{K}_{[j]}^\top \odot \mathbf{M}_{[ij]}, \\ \mathbf{C}_{[ij]} &amp;= \mathbf{C}_{[i(j-1)]} + \text{Sum} (\mathbf{A}_{[ij]}), \\ \mathbf{S}_{[ij]} &amp; =\mathbf{S}_{[i(j-1)]} + \mathbf{A}_{[ij]} \mathbf{V}_{[j]} , \\ \mathbf{Y}_{[i]} &amp; = \frac{\mathbf{S}_{[iN]}}{\mathbf{C}_{[iN]}} \end{aligned}\] </blockquote> <p>where $\text{Sum}$ operations applies summation over the row of the input matrix. And $\mathbf{M}_{[ij]}$ corresponds to a submatrix of the full maks $\mathbf{M}$ at chunk $ij$ like:</p> \[\mathbf{M}_{[ij]} = \mathbf{M}_{iC+1:i(C+1),jC+1:j(C+1)} \in \mathbb{R}^{C \times C}.\] <p>Let‚Äôs start with an example, chunking the Attention matrix $\mathbf{A}$ for a sequence of $L=9$ with $C=3$ chunk size in detail below:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/att_chunk.svg" sizes="95vw"/> <img src="/assets/img/att_chunk.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Chunking simply involves computing the queries and keys for each boxed sub-matrix, as illustrated for the upper, lower, and diagonal chunks. For every Attention matrix chunk $[ij]$, the computation follows the same pattern, multiplying the corresponding queries and keys for that chunk.</p> <p>But does the same approach apply to Selective and Fixed masks?</p> <p>In reality, chunking the Attention mask is slightly different and even more critical than chunking Attention itself due to its unique structure. Below, we provide a detailed explanation of how to chunk the Attention mask for LION-D and LION-S.</p> <p>üöÄ <strong>Note:</strong> The chunking visualization and details of this part are exclusively on the blogpost version.</p> <h3 id="lion-d-chunk">LION-D Chunk</h3> <p>Let‚Äôs start with the decay mask, as it is simpler and easier to visualize. For LION-D, the final mask is a Toeplitz mask constructed using the scalar decay factor $\lambda$. We can visualize how the mask is structured.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/maskdec_chunk.svg" sizes="95vw"/> <img src="/assets/img/maskdec_chunk.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The full mask of LION-D (or full RetNet mask) is constructed simply by the submatrix of $\Gamma$, which is a <a href="https://en.wikipedia.org/wiki/Toeplitz_matrix">Toeplitz matrix</a> itself. Regardless of where the chunk is located, whether in the upper or lower part of the mask matrix $\mathbf{M}$, it retains the same property of being a fraction of the Toeplitz matrix $\Gamma$ as bellow:</p> \[\mathbf{M}_{[ij]} = \Gamma \lambda^{|i-j|}\] <p>A pytorch implementation for LION-D Chunk Mask is provided below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mask_decay_partial</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
    <span class="n">idx</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="n">a</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">meshgrid</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">idx</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">],</span> <span class="n">indexing</span><span class="o">=</span><span class="sh">"</span><span class="s">ij</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">e</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">abs</span><span class="p">((</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">)).</span><span class="nf">float</span><span class="p">().</span><span class="nf">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">]))</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sigmoid</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="nf">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">**</span> <span class="n">e</span>
    <span class="k">return</span> <span class="n">m</span>
</code></pre></div></div> <h3 id="lion-s-chunk">LION-S Chunk</h3> <p>The full mask of LION-S is more tricky than LION-D since the upper lower and the diagonal part of the mask are shaped differently:</p> <ul> <li>The <span style="background-color: rgb(255, 248, 203); padding: 3px; color:black">Upper</span> part is influenced only by the decay factors applied from the end to the beginning of the sequence.</li> <li>The <span style="background-color: rgb(254, 200, 201); padding: 3px; color:black">Diagonal</span> part incorporates contributions from both directions, spanning from the start to the end and from the end to the start.</li> <li>The <span style="background-color: rgb(208, 243, 248); padding: 3px; color:black">Lower</span> part is influenced only by the decay factors applied from the beginning to the end of the sequence.</li> </ul> <p>Let‚Äôs visualize LION-S mask as well:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/masksel_chunk.svg" sizes="95vw"/> <img src="/assets/img/masksel_chunk.svg" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>For example, the chunk [1,3] has only the cumulative decay factors multiplied from the beginning up to the last three sequence elements, while the chunk [3,1] has only the decay factors multiplied from the end up to the first three sequence elements. This is the reason for using the matrices $\mathbf{L}^F$ and $\mathbf{L}^B$ to compute the cumulative products of the decay factors, progressing from the beginning to the end of the sequence and in reverse which can be created simply by <code class="language-plaintext highlighter-rouge">L^F = cumprod(a)</code> and <code class="language-plaintext highlighter-rouge">L^B = cumprod(flip(a))</code>.</p> <h3 id="the-code-for-lion-s-chunk-mask">The code for LION-S Chunk Mask</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">mask_forward</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="n">chunk_index</span><span class="p">,</span> <span class="n">chunk_length</span><span class="p">):</span>
    <span class="n">cumprod</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">clamp</span><span class="p">(</span><span class="n">tensor</span><span class="p">.</span><span class="nf">cumprod</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">),</span> <span class="mf">1e-6</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="o">/</span> <span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)[</span>
            <span class="p">...,</span> <span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span> <span class="p">:</span> <span class="p">(</span><span class="n">chunk_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">chunk_length</span>
        <span class="p">]</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tril</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">diagonal</span><span class="o">=-</span><span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">mask_backward</span><span class="p">(</span><span class="n">tensor</span><span class="p">,</span> <span class="n">chunk_index</span><span class="p">,</span> <span class="n">chunk_length</span><span class="p">):</span>
    <span class="n">cumprod</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">clamp</span><span class="p">(</span><span class="n">tensor</span><span class="p">.</span><span class="nf">cumprod</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">),</span> <span class="mf">1e-6</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span>
        <span class="p">...,</span> <span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span> <span class="p">:</span> <span class="p">(</span><span class="n">chunk_index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">chunk_length</span><span class="p">,</span> <span class="p">:</span>
    <span class="p">]</span> <span class="o">/</span> <span class="n">cumprod</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="nf">triu</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">),</span> <span class="n">diagonal</span><span class="o">=-</span><span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">mask_selective_partial</span><span class="p">(</span><span class="n">vec</span><span class="p">,</span> <span class="n">chunk_index</span><span class="p">,</span> <span class="n">chunk_length</span><span class="p">):</span>
    <span class="n">b</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">l</span> <span class="o">=</span> <span class="n">vec</span><span class="p">.</span><span class="n">shape</span>
    <span class="n">a_for</span> <span class="o">=</span> <span class="nf">create_matrix_from_tensor_forward</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">((</span><span class="n">torch</span><span class="p">.</span><span class="nf">ones_like</span><span class="p">(</span><span class="n">vec</span><span class="p">[...,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]),</span> <span class="n">vec</span><span class="p">[...,</span> <span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">),</span>
        <span class="n">chunk_index</span><span class="p">,</span>
        <span class="n">chunk_length</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">a_back</span> <span class="o">=</span> <span class="nf">create_matrix_from_tensor_backward</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">cat</span><span class="p">((</span><span class="n">torch</span><span class="p">.</span><span class="nf">ones_like</span><span class="p">(</span><span class="n">vec</span><span class="p">[...,</span> <span class="p">:</span><span class="mi">1</span><span class="p">]),</span> <span class="n">vec</span><span class="p">[...,</span> <span class="mi">1</span><span class="p">:]),</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">),</span>
        <span class="n">chunk_index</span><span class="p">,</span>
        <span class="n">chunk_length</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">diag_embed</span><span class="p">(</span>
        <span class="n">torch</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="n">b</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">l</span> <span class="o">-</span> <span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span><span class="p">)),</span>
        <span class="n">offset</span><span class="o">=-</span><span class="n">chunk_index</span> <span class="o">*</span> <span class="n">chunk_length</span><span class="p">,</span>
    <span class="p">)[...,</span> <span class="p">:</span> <span class="n">a_for</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>
    <span class="k">return</span> <span class="n">a_for</span> <span class="o">+</span> <span class="n">a_back</span> <span class="o">-</span> <span class="n">i</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">a_for</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
</code></pre></div></div> <p>Now that we have all elements in place let‚Äôs see how these models are working in practice on real-world datasets for masked language modeling and image classification.</p> <h2 id="next-up">Next Up</h2> <p>In the <a href="/blog/2025/lion-part4-results/">final part of this series</a>, we present the advantages of using LION compared to other methods for training SSMs or Linear Transformers.</p> <p>We also present the trade-offs for different LION ü¶Å models and compare them with other well-known SSMs and Softmax Transformers.</p> <p><a href="/blog/2025/lion-part4-results/">Continue reading to Part IV - Results</a></p>]]></content><author><name>Arshia Afzal</name></author><summary type="html"><![CDATA[Explaining LION-Chunk for Balancing Memory-Speed Tradeoffs During Inference]]></summary></entry><entry><title type="html">LION ü¶Å Part IV - Results</title><link href="https://arshiaafzal.github.io/blog/2025/lion-part4-results/" rel="alternate" type="text/html" title="LION ü¶Å Part IV - Results"/><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://arshiaafzal.github.io/blog/2025/lion-part4-results</id><content type="html" xml:base="https://arshiaafzal.github.io/blog/2025/lion-part4-results/"><![CDATA[<p>[<a href="https://www.arxiv.org/abs/2502.16249">Paper</a>] [<a href="https://github.com/LIONS-EPFL/LION">Code</a>]</p> <ol> <li><a href="/blog/2025/lion-part1-model/">Part I - Full Linear Attention</a></li> <li><a href="/blog/2025/lion-part2-theory/">Part II - Bi-directional RNN</a></li> <li><a href="/blog/2025/lion-part3-chunk/">Part III - Chunkwise Parallel from of LION</a></li> <li>Part IV - Results</li> </ol> <p>In the final part of our LION series, we will present and discuss a selection of experimental results across various domains, including vision tasks, masked language modeling (MLM), and different LION architectures. These results not only highlight LION‚Äôs versatility and efficiency across diverse applications but also serve as a preview of the comprehensive findings detailed in the full paper.</p> <h2 id="image-classification-performance-overview">Image Classification Performance Overview</h2> <h3 id="model-comparisons">Model Comparisons</h3> <p>We evaluated LION‚Äôs performance, efficiency, and training times against state-of-the-art SSMs and Transformers for image classification. The results demonstrate that LION achieves competitive performance while offering significant advantages in training speed and efficiency.</p> <table> <thead> <tr> <th>Model</th> <th>#Param</th> <th>Imagenet Top-1 Acc.</th> <th>Train. time</th> </tr> </thead> <tbody> <tr> <td>$\text{ViT}$</td> <td>86M</td> <td>$77.9$</td> <td>$\times 1$</td> </tr> <tr> <td>$\text{DeiT}$</td> <td>86M</td> <td>$\underline{81.8}$</td> <td>$\times 1$</td> </tr> <tr> <td>$\text{Hydra}$</td> <td>104M</td> <td>$81.0$</td> <td>$\times 2.51$</td> </tr> <tr> <td>$\text{Vim}$</td> <td>98M</td> <td>$\mathbf{81.9}$</td> <td>$\times 10.86$</td> </tr> <tr> <td>$\text{LION-}\text{üî•}$</td> <td>86M</td> <td>$74.7$</td> <td>$\mathbf{\times 0.73}$</td> </tr> <tr> <td>$\text{LION-D}$</td> <td>86M</td> <td>$77.8$</td> <td>$\times \underline{1.39}$</td> </tr> <tr> <td>$\text{LION-D}^{\natural}$</td> <td>86M</td> <td>$80.2$</td> <td>$\times 1.48$</td> </tr> <tr> <td>$\text{LION-S}$</td> <td>86M</td> <td>$76.3$</td> <td>$\times 1.46$</td> </tr> <tr> <td>$\text{LION-S}^{\natural}$</td> <td>86M</td> <td>$79.9$</td> <td>$\times 1.68$</td> </tr> </tbody> </table> <div class="caption" style="color: #666666; margin-top: 1px;"> Model performance comparison on ImageNet classification, showing parameter count, top-1 accuracy, and relative training time. </div> <p>As shown in the table above, LION models achieve competitive performance with vision-specific SSMs like Vim, while being significantly faster during training. LION-D performs comparably to Vim and surpasses Hydra <d-cite key="hwang2025hydra"></d-cite>, while training approximately 7x faster than Vim <d-cite key="zhu2024vision"></d-cite>. Notably, LION-üî• demonstrates the highest training speed across all models, showing that training with Full Linear Attention is significantly faster than chunkwise parallel training (used in Hydra) and considerably faster than the scan algorithm, even with optimized GPU kernels (as used in Vim). \(LION-S^{\natural}\) and \(LION-D^{\natural}\) modify the order of patches in an image to better capture the locality inherent in spatial patterns. By rearranging the patch sequence, these models enhance their understanding of local structures while still leveraging the efficiency of Linear Attention mechanisms similar to xLSTM <d-cite key="alkin2024vision"></d-cite>.</p> <h3 id="memory-efficiency">Memory Efficiency</h3> <p>The LION family demonstrates excellent memory efficiency across both vision and language tasks. Figure below shows inference memory usage with a batch size of 64 across different image resolutions, LION models (RNN form) maintain reasonable memory consumption even at high resolutions up to 2496 pixels, while adding minimal training overhead in BERT-style language modeling scenarios. In contrast, baseline models like ViT and DeiT run out of memory (OOM) at much lower resolutions.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fig1_plot.svg" sizes="95vw"/> <img src="/assets/img/fig1_plot.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Memory Usage Comparison" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Memory usage during inference across different architectures with batch size 64. LION models (RNN form) maintain reasonable memory consumption at high resolutions while other models run out of memory.</figcaption> </figure> </div> </div> <h3 id="training-time-analysis">Training Time Analysis</h3> <p>The LION family demonstrates remarkable training efficiency across both vision and language tasks. As shown in the table below, LION variants add minimal training overhead compared to SSMs.</p> <table> <thead> <tr> <th>Task</th> <th><span style="background-color: rgb(230, 255, 230); padding: 3px; color:black">LION-üî• </span></th> <th><span style="background-color: rgb(229, 204, 230); padding: 3px; color:black">LION-D </span></th> <th><span style="background-color: rgb(255, 233, 211) ; padding: 3px; color:black">LION-S </span></th> <th>Hydra</th> <th>Vim</th> </tr> </thead> <tbody> <tr> <td>Vision</td> <td>$\times 0.73$</td> <td>$\times 1.39$</td> <td>$\times 1.46$</td> <td>$\times 2.51$</td> <td>$\times 10.86$</td> </tr> <tr> <td>MLM</td> <td>$\times 0.95$</td> <td>$\times 1.10$</td> <td>$\times 1.32$</td> <td>$\times 3.13$</td> <td>‚úó</td> </tr> </tbody> </table> <div class="caption" style="color: #666666; margin-top: 1px;"> Training Times (relative to Transformer) ‚Üì </div> <p>For vision tasks, LION-üî• achieves remarkable speed, training 27% faster than standard vision Transformers <d-cite key="dosovitskiy2020image"></d-cite>. Even the more complex LION variants maintain competitive training times, with LION-D and LION-S training only ~1.4x slower than Transformers. This is significantly better than competing approaches like Hydra (2.51x slower) and Vim (10.86x slower).</p> <p>In MLM tasks, the efficiency gains are even more pronounced. LION-üî• nearly matches Transformer training speed at just 0.95x, while LION-D adds only 10% overhead. Even LION-S remains efficient at 1.32x. All LION variants significantly outperform Hydra‚Äôs 3.13x slowdown, while Vim is not applicable to MLM tasks (marked as ‚úó).</p> <h2 id="mlm-results">MLM Results</h2> <p>For masked language modeling (MLM) tasks, we evaluated LION models against BERT <d-cite key="devlin2018bert"></d-cite> and Hydra on both MLM pretraining and GLUE benchmark finetuning. The results show that LION variants achieve competitive performance while maintaining good training efficiency.</p> <table> <thead> <tr> <th>Model</th> <th>MLM Acc.</th> <th>GLUE</th> <th>Train. time</th> </tr> </thead> <tbody> <tr> <td>BERT</td> <td>$\underline{69.88}$</td> <td>$\mathbf{82.95}$</td> <td>$\times 1$</td> </tr> <tr> <td>Hydra</td> <td>$\mathbf{71.18}$</td> <td>$\underline{81.77}$</td> <td>$\times 3.13$</td> </tr> <tr> <td><span style="background-color: rgb(230, 255, 230); padding: 3px; color:black">LION-üî• </span></td> <td>$67.11$</td> <td>$80.76$</td> <td>$\times \mathbf{0.95}$</td> </tr> <tr> <td><span style="background-color: rgb(229, 204, 230); padding: 3px; color:black">LION-D </span></td> <td>$68.64$</td> <td>$81.34$</td> <td>$\times \underline{1.10}$</td> </tr> <tr> <td><span style="background-color: rgb(255, 233, 211) ; padding: 3px; color:black">LION-S </span></td> <td>$69.16$</td> <td>$81.58$</td> <td>$\times 1.32$</td> </tr> </tbody> </table> <div class="caption" style="color: #666666; margin-top: 1px;"> C4 MLM and GLUE results for the LARGE scale (334M). For each dataset, the best and second best results are highlighted with bold and underline respectively. </div> <h2 id="lion-architecture-variants-and-trade-offs">LION Architecture Variants and Trade-offs</h2> <p>Let‚Äôs explore how different LION variants handle the trade-off between memory usage and inference speed. We will look at three key approaches:</p> <ol> <li>Full Linear Attention - The standard approach using the Full Attention matrix.</li> <li>Bidirectional RNN - Our memory-efficient RNN formulation.</li> <li>LION Chunk - A balanced approach using chunked computation.</li> </ol> <h3 id="memory-vs-speed-trade-offs">Memory vs Speed Trade-offs</h3> <p>The first plot below shows how these approaches compare in terms of memory efficiency and inference speed in LION-D. The RNN approach proves to be the most memory-efficient, while Full Attention uses the most memory. LION Chunk provides a nice middle ground - it uses less memory than Full Attention while actually achieving faster inference speeds than both alternatives. This makes it particularly attractive when you need to balance performance with resource constraints.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/fig3_plot.svg" sizes="95vw"/> <img src="/assets/img/fig3_plot.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Impact of Chunk Size" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Analysis of how chunk size affects model performance across different LION-D variants.</figcaption> </figure> </div> </div> <p>For LION-üî•, we see a similar pattern, but the chunking approach is even more pronounced.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/linear_chunking.svg" sizes="95vw"/> <img src="/assets/img/linear_chunking.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Linear Chunking Analysis" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Evaluation of linear chunking strategies and their impact on model efficiency of LION-üî•.</figcaption> </figure> </div> </div> <p>Lastly for LION-S, we see that the chunking approach is only faster at lower resolutions - at higher resolutions, the overhead from mask calculations starts to slow it down.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/selective_chunking.svg" sizes="95vw"/> <img src="/assets/img/selective_chunking.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="Selective Chunking Analysis" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> <figcaption class="caption">Performance comparison of selective chunking approaches across different sequence lengths with LION-S.</figcaption> </figure> </div> </div> <h2 id="future-directions">Future Directions</h2> <ul> <li> <p><strong>Expanding LION‚Äôs Potential:</strong> Our experiments focused on three main mask choices, but LION has the potential to accelerate other Linear Transformer variants for bidirectional tasks.</p> </li> <li> <p><strong>Optimizing Chunkwise Parallelism:</strong> The chunkwise parallel implementation during inference was done in PyTorch, with room for optimization through GPU kernel programming to reduce I/O overhead and improve speed.</p> </li> <li> <p><strong>Stabilizing Hydra and Mamba with LION:</strong> Hydra <d-cite key="hwang2025hydra"></d-cite> and Mamba <d-cite key="gu2023mamba"></d-cite> activations led to unstable training under Full Attention, suggesting LION could be used to stabilize these variants in the future.</p> </li> </ul> <h1 id="last-points">Last Points</h1> <p>We encourage the readers of this blog post to read the full <a href="https://www.arxiv.org/abs/2502.16249">paper</a> for more details about the LION framework and experimental setups. The implementation details are available in the <a href="https://github.com/LIONS-EPFL/LION">code repository</a>.</p> <p>If you use this work, please consider citing the paper:</p> <div class="language-bibtex highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">@article</span><span class="p">{</span><span class="nl">afzal2025linear</span><span class="p">,</span>
  <span class="na">title</span><span class="p">=</span><span class="s">{Linear Attention for Efficient Bidirectional Sequence Modeling}</span><span class="p">,</span>
  <span class="na">author</span><span class="p">=</span><span class="s">{Afzal, Arshia and Abad Rocamora, Elias and Candogan, Leyla Naz and Puigdemont, Pol and Tonin, Francesco and Wu, Yongtao and Shoaran, Mahsa and Cevher, Volkan}</span><span class="p">,</span>
  <span class="na">journal</span><span class="p">=</span><span class="s">{arXiv preprint arXiv:2502.16249}</span><span class="p">,</span>
  <span class="na">year</span><span class="p">=</span><span class="s">{2025}</span><span class="p">,</span>
  <span class="na">url</span><span class="p">=</span><span class="s">{https://arxiv.org/abs/2502.16249}</span><span class="p">,</span>
  <span class="na">doi</span><span class="p">=</span><span class="s">{10.48550/arXiv.2502.16249}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Arshia Afzal</name></author><category term="math"/><category term="ai"/><summary type="html"><![CDATA[Comprehensive results on Vision, MLM and more LION variants]]></summary></entry></feed>